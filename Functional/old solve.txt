// Generate all resolvents
            for (size_t i = 0; i < clauseSets.size(); i++) {
                for (size_t j = i + 1; j < clauseSets.size(); j++) {
                    set<int> resolvent;
                    if (resolve(clauseSets[i], clauseSets[j], resolvent)) {
                        cout << "[DEBUG] Resolvent generated from clauses " << i << " and " << j << ": ";
                        printClause(resolvent);

                        // If the resolvent is empty, UNSAT is detected
                        if (resolvent.empty()) {
                            cout << "[DEBUG] Empty resolvent found. UNSATISFIABLE." << endl;
                            return false;
                        }

                        // Avoid adding duplicate or tautological clauses
                        if (isTautology(resolvent)) {
                            cout << "[DEBUG] Tautological resolvent discarded: ";
                            printClause(resolvent);
                            continue; // Skip tautological resolvents
                        }
                        if (uniqueClauses.find(resolvent) == uniqueClauses.end()) {
                            newClauses.push_back(resolvent);
                            uniqueClauses.insert(resolvent); // Mark as unique
                        }
                    }
                }
            }